{"index.js":"function smallestCommons(arr) {\n    const primeFactors = {};\n  const [min, max] = arr.sort((a, b) => a - b);\n  for (let i = min; i <= max; i++) {\n    // Factorize number in range\n    const currentFactors = getPrimeFactors(i);\n    for (let prime in currentFactors) {\n      // Add factor to set or update number of occurrences\n      if (!primeFactors[prime] || currentFactors[prime] > primeFactors[prime]) {\n        primeFactors[prime] = currentFactors[prime]\n      }\n    }\n  }\n  // Build SCM from factorization\n  let multiple = 1;\n  for (let prime in primeFactors) {\n    multiple *= prime ** primeFactors[prime];\n  }\n  return multiple;\n}\n\n// Compute prime factors of a number\nfunction getPrimeFactors(num) {\n  const factors = {};\n  for (let i = 2; i <= num; i++) {\n    // Count occurances of factor\n    // Note that composite values will not divide num\n    while ((num % i) === 0) {\n      factors[i] = (factors[i]) ? factors[i] + 1 : 1;\n      num /= i;\n    }\n  }\n  return factors;\n}\nsmallestCommons([1,5]);"}